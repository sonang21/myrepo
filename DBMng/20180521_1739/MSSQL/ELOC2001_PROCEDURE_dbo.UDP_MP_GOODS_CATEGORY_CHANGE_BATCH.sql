/* *************************************************************************
 * NAME : dbo.UDP_MP_GOODS_CATEGORY_CHANGE_BATCH
 * TYPE : PROCEDURE (SQL_STORED_PROCEDURE)
 * TIME : Create: 2016-04-05 20:39:05.137
 *        Modify: 2018-05-03 17:23:35.823
 *        Backup: 20180521_1739
 ************************************************************************* */


CREATE PROC [DBO].[UDP_MP_GOODS_CATEGORY_CHANGE_BATCH]
	@FIND_CATEGORY VARCHAR(12),
	@REPLACE_CATEGORY VARCHAR(12),
	@MM_ID VARCHAR(12),  
	@MM_NM VARCHAR(12)  
AS
BEGIN
	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
	
	DECLARE @BATCHFLAG INT
	
	IF LEN(@FIND_CATEGORY) <= LEN(@REPLACE_CATEGORY) AND LEN(@FIND_CATEGORY) >= 6
		BEGIN
			SELECT DISTINCT G_MODELNO
			INTO #TEMP_GOODS
			FROM GOODS
			WHERE G_CATEGORY LIKE @FIND_CATEGORY + '%'
			OPTION (MAXDOP 1)
			
			SELECT DISTINCT G_MODELNO, ATTRIBUTE_ID, ATTRIBUTE_ELEMENT_ID, ATTRIBUTE_VALUE
			INTO #TEMP_CATALOG_ATTRIBUTE
			FROM GOODS_CATALOG_ATTRIBUTE
			WHERE DEL_YN = 'N' AND G_MODELNO IN (SELECT DISTINCT G_MODELNO FROM #TEMP_GOODS)
			OPTION (MAXDOP 1)
			
			SELECT DISTINCT ATTRIBUTE_ID
			INTO #ATTRIBUTE_CATEGORY
			FROM (
				SELECT ATTRIBUTE_ID
				FROM GOODS_CATEGORY_ATTRIBUTE
				WHERE CATEGORY IN
				(
					SELECT TOP 1 CATEGORY
					FROM GOODS_CATEGORY_ATTRIBUTE
					WHERE CATEGORY = LEFT(@FIND_CATEGORY, 4) OR CATEGORY = LEFT(@FIND_CATEGORY, 6) OR CATEGORY = LEFT(@FIND_CATEGORY, 8)
					ORDER BY LEN(CATEGORY) DESC
				)
				UNION ALL
				SELECT ATTRIBUTE_ID
				FROM GOODS_CATEGORY_ATTRIBUTE
				WHERE CATEGORY LIKE @FIND_CATEGORY + '%' AND LEN(CATEGORY) > LEN(@FIND_CATEGORY)
			) A
			
			-- 중복 관리용 속성 검색 (관리용 속성명이 같지만 전시용 속성 또는 구분코드 다른 경우 처리 안함)
			SELECT @BATCHFLAG = COUNT(*)
			FROM GOODS_ATTRIBUTE A
				INNER JOIN #ATTRIBUTE_CATEGORY B ON A.ATTRIBUTE_ID = B.ATTRIBUTE_ID
				INNER JOIN GOODS_ATTRIBUTE C ON A.MANAGE_ATTRIBUTE_NM = C.MANAGE_ATTRIBUTE_NM AND C.CATEGORY = LEFT(@REPLACE_CATEGORY, 4) AND C.DEL_YN = 'N'
			WHERE A.CATEGORY = LEFT(@FIND_CATEGORY, 4)
			  AND A.DEL_YN = 'N'
			  AND (A.GALLERY_ATTRIBUTE_NM <> C.GALLERY_ATTRIBUTE_NM OR A.USE_CLASS_CODE <> C.USE_CLASS_CODE)
			  AND A.ATTRIBUTE_ID IN (SELECT DISTINCT ATTRIBUTE_ID FROM #TEMP_CATALOG_ATTRIBUTE)
			
			IF @BATCHFLAG = 0
				BEGIN
					--### 1단계 속성 (GOODS_ATTRIBUTE)
					-- 분류속성 중에 체크된 속성만 일괄추가 (기등록된 속성은 추가하지 않음.)
					INSERT INTO GOODS_ATTRIBUTE(ATTRIBUTE_ID, MANAGE_ATTRIBUTE_NM, GALLERY_ATTRIBUTE_NM, IS_MANAGE_DISPLAY, USE_CLASS_CODE, IS_UNIT, UNIT_NM, INS_DATE, INS_OPRT, DEL_YN, GROUP_ATTRIBUTE_ID, GROUP_CHAR, IS_GALLERY_DISPLAY, CATEGORY, IS_BOLD)
					SELECT (SELECT ISNULL(MAX(ATTRIBUTE_ID), 0) FROM GOODS_ATTRIBUTE) + ROWNUM
					      , MANAGE_ATTRIBUTE_NM
						  , GALLERY_ATTRIBUTE_NM
						  , IS_MANAGE_DISPLAY
						  , USE_CLASS_CODE
						  , IS_UNIT
						  , UNIT_NM
						  , GETDATE()
						  , 'MP_batch'
						  , DEL_YN
						  , GROUP_ATTRIBUTE_ID
						  , GROUP_CHAR
						  , IS_GALLERY_DISPLAY
						  , LEFT(@REPLACE_CATEGORY, 4)
						  , IS_BOLD
					FROM (
						SELECT ROW_NUMBER() OVER(ORDER BY A.ATTRIBUTE_ID) ROWNUM
						     , A.MANAGE_ATTRIBUTE_NM
							 , A.GALLERY_ATTRIBUTE_NM
							 , A.IS_MANAGE_DISPLAY
							 , A.USE_CLASS_CODE
							 , A.IS_UNIT
							 , A.UNIT_NM
							 , A.DEL_YN
							 , A.GROUP_ATTRIBUTE_ID
							 , A.GROUP_CHAR
							 , A.IS_GALLERY_DISPLAY
							 , A.IS_BOLD
						FROM GOODS_ATTRIBUTE A
							INNER JOIN #ATTRIBUTE_CATEGORY B ON A.ATTRIBUTE_ID = B.ATTRIBUTE_ID
							LEFT JOIN GOODS_ATTRIBUTE C ON A.MANAGE_ATTRIBUTE_NM = C.MANAGE_ATTRIBUTE_NM AND C.CATEGORY = LEFT(@REPLACE_CATEGORY, 4) AND C.DEL_YN = 'N'
						WHERE A.CATEGORY = LEFT(@FIND_CATEGORY, 4)
						  AND A.DEL_YN = 'N'
						  AND C.ATTRIBUTE_ID IS NULL
						  AND A.ATTRIBUTE_ID IN (SELECT DISTINCT ATTRIBUTE_ID FROM #TEMP_CATALOG_ATTRIBUTE)
					) A;
					
					SELECT A.ATTRIBUTE_ID A_ATTRIBUTE_ID
					     , C.ATTRIBUTE_ID B_ATTRIBUTE_ID
						 , A.MANAGE_ATTRIBUTE_NM
					INTO #ATTRIBUTE_MAPPING
					FROM GOODS_ATTRIBUTE A
						INNER JOIN #ATTRIBUTE_CATEGORY B ON A.ATTRIBUTE_ID = B.ATTRIBUTE_ID
						INNER JOIN GOODS_ATTRIBUTE C ON A.MANAGE_ATTRIBUTE_NM = C.MANAGE_ATTRIBUTE_NM AND A.GALLERY_ATTRIBUTE_NM = C.GALLERY_ATTRIBUTE_NM AND C.CATEGORY = LEFT(@REPLACE_CATEGORY, 4) AND C.DEL_YN = 'N'
					WHERE A.CATEGORY = LEFT(@FIND_CATEGORY, 4)
					  AND A.DEL_YN = 'N'
					  AND A.ATTRIBUTE_ID IN (SELECT DISTINCT ATTRIBUTE_ID FROM #TEMP_CATALOG_ATTRIBUTE)
					
					-- 추가된 속성 중 GROUP_ATTRIBUTE_ID 변경
					UPDATE GOODS_ATTRIBUTE
					SET GROUP_ATTRIBUTE_ID = C.B_ATTRIBUTE_ID
					FROM GOODS_ATTRIBUTE A
						INNER JOIN #ATTRIBUTE_MAPPING B ON A.ATTRIBUTE_ID = B.B_ATTRIBUTE_ID
						INNER JOIN #ATTRIBUTE_MAPPING C ON A.GROUP_ATTRIBUTE_ID = C.A_ATTRIBUTE_ID
					WHERE GROUP_ATTRIBUTE_ID IS NOT NULL
					
					--### 속성원 (GOODS_ATTRIBUTE_ELEMENT)
					INSERT INTO GOODS_ATTRIBUTE_ELEMENT(ATTRIBUTE_ID, ATTRIBUTE_ELEMENT_ID, ATTRIBUTE_ELEMENT, DISPLAY_ORDER, IS_DISPLAY, IS_BOLD, INS_DATE, INS_OPRT, DEL_YN)
					SELECT ATTRIBUTE_ID
					     , (SELECT ISNULL(MAX(ATTRIBUTE_ELEMENT_ID), 0) FROM GOODS_ATTRIBUTE_ELEMENT B WHERE B.ATTRIBUTE_ID = A.ATTRIBUTE_ID) + ROWNUM
						 , ATTRIBUTE_ELEMENT
						 , DISPLAY_ORDER
						 , IS_DISPLAY
						 , IS_BOLD
						 , GETDATE()
						 , 'MP_batch'
						 , DEL_YN
					FROM (
						SELECT ROW_NUMBER() OVER(PARTITION BY ATTRIBUTE_ID ORDER BY ATTRIBUTE_ELEMENT_ID) ROWNUM
						     , ATTRIBUTE_ID
							 , ATTRIBUTE_ELEMENT
							 , DISPLAY_ORDER
							 , IS_DISPLAY
							 , IS_BOLD
							 , DEL_YN
						FROM (
							SELECT DISTINCT
							       B_ATTRIBUTE_ID ATTRIBUTE_ID
								 , A.ATTRIBUTE_ELEMENT_ID
								 , A.ATTRIBUTE_ELEMENT
								 , A.DISPLAY_ORDER
								 , A.IS_DISPLAY
								 , A.IS_BOLD
								 , A.DEL_YN
							FROM GOODS_ATTRIBUTE_ELEMENT A
								INNER JOIN #ATTRIBUTE_MAPPING B ON A.ATTRIBUTE_ID = A_ATTRIBUTE_ID
								LEFT JOIN GOODS_ATTRIBUTE_ELEMENT C ON C.ATTRIBUTE_ID = B_ATTRIBUTE_ID AND A.ATTRIBUTE_ELEMENT = C.ATTRIBUTE_ELEMENT AND C.DEL_YN = 'N'
							WHERE A.DEL_YN = 'N'
							  AND C.ATTRIBUTE_ID IS NULL
						) A
					) A;
					
					SELECT DISTINCT
					       A_ATTRIBUTE_ID
						 , A.ATTRIBUTE_ELEMENT_ID A_ATTRIBUTE_ELEMENT_ID
						 , B_ATTRIBUTE_ID
						 , C.ATTRIBUTE_ELEMENT_ID B_ATTRIBUTE_ELEMENT_ID
					INTO #ATTRIBUTE_ELEMENT_MAPPING
					FROM GOODS_ATTRIBUTE_ELEMENT A
						INNER JOIN #ATTRIBUTE_MAPPING B ON A.ATTRIBUTE_ID = A_ATTRIBUTE_ID
						INNER JOIN GOODS_ATTRIBUTE_ELEMENT C ON C.ATTRIBUTE_ID = B_ATTRIBUTE_ID AND A.ATTRIBUTE_ELEMENT = C.ATTRIBUTE_ELEMENT AND C.DEL_YN = 'N'
					WHERE A.DEL_YN = 'N'
					  AND (A_ATTRIBUTE_ID <> B_ATTRIBUTE_ID OR A.ATTRIBUTE_ELEMENT_ID <> C.ATTRIBUTE_ELEMENT_ID)
					
					--### 카탈로그 속성 (GOODS_CATALOG_ATTRIBUTE)
					UPDATE GOODS_CATALOG_ATTRIBUTE
					SET DEL_YN = 'N', UPD_DATE = GETDATE(), UPD_OPRT = 'MP_batch', INS_DATE = GETDATE()
					FROM GOODS_CATALOG_ATTRIBUTE
						INNER JOIN #ATTRIBUTE_ELEMENT_MAPPING ON ATTRIBUTE_ID = B_ATTRIBUTE_ID AND ATTRIBUTE_ELEMENT_ID = B_ATTRIBUTE_ELEMENT_ID
					WHERE DEL_YN = 'Y'
					  AND G_MODELNO IN (SELECT DISTINCT G_MODELNO FROM #TEMP_GOODS)
					
					INSERT INTO GOODS_CATALOG_ATTRIBUTE(G_MODELNO, ATTRIBUTE_ID, ATTRIBUTE_ELEMENT_ID, ATTRIBUTE_VALUE, INS_DATE, INS_OPRT, DEL_YN, UPD_DATE, UPD_OPRT)
					SELECT DISTINCT
					       A.G_MODELNO
						 , B_ATTRIBUTE_ID
						 , B_ATTRIBUTE_ELEMENT_ID
						 , A.ATTRIBUTE_VALUE
						 , GETDATE()
						 , 'MP_batch'
						 , 'N'
						 , GETDATE()
						 , 'MP_batch'
					FROM #TEMP_CATALOG_ATTRIBUTE A
						INNER JOIN #ATTRIBUTE_ELEMENT_MAPPING ON A.ATTRIBUTE_ID = A_ATTRIBUTE_ID AND A.ATTRIBUTE_ELEMENT_ID = A_ATTRIBUTE_ELEMENT_ID
						LEFT JOIN GOODS_CATALOG_ATTRIBUTE B ON A.G_MODELNO = B.G_MODELNO AND B.ATTRIBUTE_ID = B_ATTRIBUTE_ID AND B.ATTRIBUTE_ELEMENT_ID = B_ATTRIBUTE_ELEMENT_ID
					WHERE B.G_MODELNO IS NULL
					
					UPDATE GOODS_CATALOG_ATTRIBUTE
					SET DEL_YN = 'Y', UPD_DATE = GETDATE(), UPD_OPRT = 'MP_batch'
					FROM GOODS_CATALOG_ATTRIBUTE
						INNER JOIN #ATTRIBUTE_ELEMENT_MAPPING ON ATTRIBUTE_ID = A_ATTRIBUTE_ID AND ATTRIBUTE_ELEMENT_ID = A_ATTRIBUTE_ELEMENT_ID
					WHERE DEL_YN = 'N'
					  AND G_MODELNO IN (SELECT DISTINCT G_MODELNO FROM #TEMP_GOODS)
					
					-- GOODS 변경
					IF LEN(@FIND_CATEGORY) = 8
					BEGIN
						EXEC UDP_MP_GOODS_CATE_CHANGE @FIND_CATEGORY, @REPLACE_CATEGORY, @MM_ID, @MM_NM
					END
					ELSE
					BEGIN
						--### 그룹툴 조건명 속성처리
						SELECT ATTRIBUTE_ID
						INTO #TEMP_ATTRIBUTE_GROUP
						FROM GOODS_ATTRIBUTE
						WHERE DEL_YN = 'N'
						  AND CATEGORY = ''
						  AND CHARINDEX('조건명_', MANAGE_ATTRIBUTE_NM) > 0
						
						UPDATE GOODS_CATALOG_ATTRIBUTE
						SET DEL_YN = 'Y', UPD_DATE = GETDATE(), UPD_OPRT = 'MP_batch'
						WHERE DEL_YN = 'N'
						  AND ATTRIBUTE_ID IN (SELECT ATTRIBUTE_ID FROM #TEMP_ATTRIBUTE_GROUP)
						  AND G_MODELNO IN (SELECT DISTINCT G_MODELNO FROM #TEMP_GOODS)
						
						UPDATE GOODS
						SET G_CATEGORY = CASE WHEN LEN(@REPLACE_CATEGORY) = 8 THEN @REPLACE_CATEGORY ELSE REPLACE(SUBSTRING(G_CATEGORY, 1, LEN(@FIND_CATEGORY)), @FIND_CATEGORY, @REPLACE_CATEGORY) + SUBSTRING(G_CATEGORY, LEN(@FIND_CATEGORY) + 1, 8 - LEN(@FIND_CATEGORY)) END
							, G_FLAG = '1'
							, G_MODELNO_GROUP = NULL
							, G_CONDITION_NUMBER = NULL
							, G_GROUP_ATTRIBUTE_ID = NULL
							, G_GROUP_FLAG = NULL
						WHERE G_MODELNO IN (SELECT DISTINCT G_MODELNO FROM #TEMP_GOODS)
					END
					
					-- 순서가 다른 속성 리턴
--					SELECT '속성순서 점검', ATTRIBUTE_ID, MANAGE_ATTRIBUTE_NM
--					FROM #ATTIBUTE_DUPLICATION
					SELECT '속성순서 점검'
					UNION ALL
					SELECT CAST(B_ATTRIBUTE_ID AS VARCHAR(20))
					FROM #ATTRIBUTE_MAPPING
				END
			ELSE
				BEGIN
					-- 관리용 속성명이 같지만 전시용 속성 또는 구분코드 다른 속성 리턴
					SELECT '중복속성 점검'
					UNION ALL
					SELECT A.MANAGE_ATTRIBUTE_NM
					FROM GOODS_ATTRIBUTE A
						INNER JOIN #ATTRIBUTE_CATEGORY B ON A.ATTRIBUTE_ID = B.ATTRIBUTE_ID
						INNER JOIN GOODS_ATTRIBUTE C ON A.MANAGE_ATTRIBUTE_NM = C.MANAGE_ATTRIBUTE_NM AND C.CATEGORY = LEFT(@REPLACE_CATEGORY, 4) AND C.DEL_YN = 'N'
					WHERE A.CATEGORY = LEFT(@FIND_CATEGORY, 4)
					  AND A.DEL_YN = 'N'
					  AND (A.GALLERY_ATTRIBUTE_NM <> C.GALLERY_ATTRIBUTE_NM OR A.USE_CLASS_CODE <> C.USE_CLASS_CODE)
					  AND A.ATTRIBUTE_ID IN (SELECT DISTINCT ATTRIBUTE_ID FROM #TEMP_CATALOG_ATTRIBUTE)
				END
		END
	ELSE
		BEGIN
			-- 분류코드 자릿수가 다른 경우 리턴
			SELECT '분류코드 오류'
		END
END
